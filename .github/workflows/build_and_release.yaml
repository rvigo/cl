
name: Build & Release

permissions:
  contents: write

on:
  push:
    tags:
      - "v*"

jobs:
  format:
    name: fmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@1.73.0
        with:
          components: rustfmt
      - name: Check formatting
        run: |
          cargo fmt --all -- --check
  clippy:
    name: clippy
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@1.73.0
        with:
          components: clippy
      - name: Check the lints
        run: |
          cargo clippy -- -D warnings
  test:
    name: test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@1.73.0
      - name: Unit Test
        run: |
          cargo test --workspace
        env:
          RUST_BACKTRACE: 1

  build:
    name: Build
    needs: [format, clippy, test]
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        target:
          [
            x86_64-apple-darwin,
            aarch64-unknown-linux-gnu,
            x86_64-unknown-linux-gnu,
            aarch64-apple-darwin,
          ]

        include:
          - target: x86_64-apple-darwin
            os: macos
          - target: x86_64-unknown-linux-gnu
            os: ubuntu
          - target: aarch64-unknown-linux-gnu
            os: ubuntu
          - target: aarch64-apple-darwin
            os: macos
    steps:
      - name: Install toolchain for ${{ matrix.target }}
        uses: dtolnay/rust-toolchain@1.73.0
        with:
          targets: ${{ matrix.target }}
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Cross
        if: ${{ matrix.os == 'ubuntu' }}
        run: cargo install cross
      - name: Build with Cross
        if: ${{ matrix.os == 'ubuntu' }}
        run: |
            cross build --release --bins --target ${{ matrix.target }}
      - name: Build
        if: ${{ matrix.os != 'ubuntu' }}
        run: |
            cargo build --release --bins --target ${{ matrix.target }}

      - name: extract binary name
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          TARGET=${{ matrix.target }}
          BINARY_NAME=cl_${VERSION}_${TARGET}

          echo $BINARY_NAME

          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
      - name: rename binary
        run: |
            mv target/${{ matrix.target }}/release/cl target/${{ matrix.target }}/release/${BINARY_NAME}

      - name: check binary name 
        run: ls -latr target/${{ matrix.target }}/release

      - name: Compress file 
        run: |
          tar -czvf target/${{ matrix.target }}/release/${BINARY_NAME}.tar.gz -C target/${{ matrix.target }}/release/ ${BINARY_NAME}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}.tar.gz
          path: target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}.tar.gz
          if-no-files-found: error

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: target/artifacts

      - name: Create checksum
        run: |
          cd target/artifacts
          for file in *; do
            shasum -a 256 $file > $(basename $file .tar.gz).sha256
          done

      - name: check artifacts
        run: ls -latr target/artifacts 

      - name: Create Release 
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/artifacts/* 
          token: ${{ secrets.GH_TOKEN }}

      - name: Update Homebrew formula
        uses: dawidd6/action-homebrew-bump-formula@v3
        with:
          token:  ${{ secrets.GH_TOKEN }}
          tap: rvigo/homebrew-cl
          formula: cl
   