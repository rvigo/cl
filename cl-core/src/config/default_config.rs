use crate::{
    preferences::Preferences,
    resource::fs::{read_to_string, write},
};

use super::{get_config_path, Config, CONFIG_ROOT_DIR};
use anyhow::{bail, Context, Result};
use dirs::home_dir;
use serde::{Deserialize, Serialize};
use std::path::PathBuf;

const COMMAND_FILE: &str = "commands.toml";
const DEFAULT_FILE_MESSAGE: &str = "# This file is generated by `cl`. Please do not change it\n\n";

#[derive(Serialize, Deserialize)]
#[serde(rename_all = "kebab-case")]
pub struct DefaultConfig {
    #[serde(alias = "command_file_path")]
    commands_file_path: PathBuf,
    #[serde(alias = "preferences")]
    preferences: Preferences,
}

impl DefaultConfig {
    fn new() -> Result<Self> {
        let home_dir = home_dir().context("Could not find home directory")?;

        let config = Self {
            commands_file_path: home_dir.join(CONFIG_ROOT_DIR).join(COMMAND_FILE),
            preferences: Preferences::default(),
        };

        config.save().context("Cannot save the config file")?;

        Ok(config)
    }
}

impl Config for DefaultConfig {
    fn load() -> Result<Self> {
        let config_file_path = get_config_path();

        match read_to_string!(config_file_path) {
            Ok(config_data) => {
                if !config_data.is_empty() {
                    let config: Self = toml::from_str(&config_data)?;
                    return Ok(config);
                }
            }
            Err(err) => bail!(err),
        }

        Self::new()
    }

    fn save(&self) -> Result<()> {
        let config_file_path = get_config_path();
        let mut config_data = toml::to_string(self)?;

        config_data.insert_str(0, DEFAULT_FILE_MESSAGE);

        write!(config_file_path, config_data)?;

        Ok(())
    }

    fn preferences(&self) -> &Preferences {
        &self.preferences
    }

    fn preferences_mut(&mut self) -> &mut Preferences {
        &mut self.preferences
    }

    fn command_file_path(&self) -> PathBuf {
        self.commands_file_path.to_path_buf()
    }

    fn log_dir_path(&self) -> PathBuf {
        let home = home_dir().expect("Cannot find home directory");
        home.join(CONFIG_ROOT_DIR)
    }
}
